#!/bin/bash
#                                                          -*- shell-script -*-
#
###########################################
### Typescript Workspace Startup File
###
### @brief Creates the Required files and configuration needed
### to begin working with TypeScript
###
### @version 1.0 - First Revision with `lite-server` 
###
### @author Abhijit Bose <boseji@users.noreply.github.com>
###
### @license : 
### Copyright (C) 2020 Abhijit Bose <boseji@users.noreply.github.com>
###
###    SPDX-License-Identifier: GPL-2.0-only
###
###    This program is part of the TypeScript learning efforts
###    by the Author.
###
###########################################

## Create the HTML
echo '<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Learning TypeScript</title>
    <script src="app.js" defer></script>
</head>
<body>

</body>
</html>' > index.html

## Create Typescript APP
echo 'console.log("It works!");' > app.ts

## Check if tsc is installed
G=`tsc -v | wc -c`
if [ "$G" == "" ]; then
    sudo npm install -g typescript
fi

## Initialize the Typescript Config
tsc --init

## Create the NPM Initialization
echo '{
  "name": "typescript-project",
  "version": "1.0.0",
  "description": "",
  "private": true,
  "dependencies": {},
  "devDependencies": {
    "lite-server": "^2.2.2"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "lite-server"
  },
  "author": "",
  "license": "ISC"
}' > package.json

## Create the Lite-server-config file
cat <<EO2 > bs-config.json
{
    "port": 8080,
    "open":false
}
EO2

## Create the Git Ignore file just-in-case
cat <<EOT >.gitignore
# JS files
.js

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

EOT

## Instructions to Move further
echo
echo
echo " Type Script Workspace setup completed successfully "
echo "----------------------------------------------------"
echo
echo " > Next we need to load the development dependencies "
echo
echo "    Type - "
echo "          npm install"
echo
echo " > To Compile Code in TypeScript"
echo
echo "    Type -"
echo "          tsc"
echo
echo " > To Start the Application"
echo
echo "    Type - "
echo "          npm start"
echo
